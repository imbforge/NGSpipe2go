sc_bioc_readAggrData_vars=[
    outdir          : RESULTS + "/sc_bioc_readAggrData",
    pipeline_root   : PIPELINE_ROOT,                     
    res             : RESULTS,          //where the results lie
    seqtype         : ESSENTIAL_SEQTYPE,
    targets         : new File(PIPELINE_ROOT + "/pipelines/scRNAseq/targets.txt").getCanonicalPath(),   //targets file. 
    gtf             : ESSENTIAL_GENESGTF,           
    aggr_data_dir   : (ESSENTIAL_SEQTYPE == "tenX" ? cellranger_aggr_vars.outdir + "/" + cellranger_aggr_vars.id + "/outs/count/filtered_feature_bc_matrix/" : 
                        (ESSENTIAL_SEQTYPE == "tenXmultiome" ? cellrangerarc_aggr_vars.outdir + "/" + cellrangerarc_aggr_vars.id + "/outs/filtered_feature_bc_matrix" :
                          (ESSENTIAL_SEQTYPE == "tenX_ATAC" ? cellrangeratac_aggr_vars.outdir + "/" + cellrangeratac_aggr_vars.id + "/outs/filtered_peak_bc_matrix" : 
                            (ESSENTIAL_SEQTYPE == "ParseBio" ? splitpipe_comb_vars.outdir + "/all-sample/DGE_filtered/" : 
                              (ESSENTIAL_SEQTYPE == "ScaleBio" ? RESULTS + "/samples/" :
                                (ESSENTIAL_SEQTYPE == "SmartSeq" ? subread_count_vars.outdir :
                                  RESULTS + "aggr")))))), //folder name of aggregated sample data
    run_demux       : RUN_DEMUX, //run sample de-multiplexing step
    demux_out       : (RUN_DEMUX == "demux_HTO" ? (binding.variables.containsKey("demux_hto_vars") ? demux_hto_vars.outdir : "") : 
                        (["demux_GT","demux_GT_noAssignment"].contains(RUN_DEMUX) ? (binding.variables.containsKey("demux_gt_vars") ? demux_gt_vars.outdir : "") : "") ),  //where the demux output lie
    demuxCluster_out : (binding.variables.containsKey("assignSouporcellCluster_vars") ? assignSouporcellCluster_vars.outdir : "") //output assignSouporcellCluster
]

load PIPELINE_ROOT + "/modules/scRNAseq/sc_bioc_readAggrData.groovy"

// expected parameter types
class sc_bioc_readAggrData_vars_schema {
    String outdir             
    String pipeline_root           
    String res             
    String seqtype             
    String targets   
    String gtf             
    String aggr_data_dir   
    String run_demux
    String demux_out
    String demuxCluster_out             

    // check for the presence of mandatory params
    boolean asBoolean() {
      outdir && res && targets
    }
}

validate_schema(sc_bioc_readAggrData_vars_schema, sc_bioc_readAggrData_vars)
