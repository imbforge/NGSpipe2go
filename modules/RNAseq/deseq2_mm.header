DE_DESeq2_MM_vars=[
    targets  : DE_DESeq2_vars.targets,        //targets file. Check the bin directory for the format
    contrasts: DE_DESeq2_vars.contrasts,      //contrasts file. Check the bin directory for the format
    filter   : DE_DESeq2_vars.filter,         //whether to perform automatic independent filtering of lowly expressed genes
    prefix   : DE_DESeq2_vars.prefix,         //prefix to be removed from file names
    suffix   : DE_DESeq2_vars.suffix,         //suffix to be removed from file names
    dupradar_outdir: dupRadar_vars.outdir,    //where the dupradar left the output tables
    cwd      : RESULTS + "/subread-count_MM", //directory where the .tsv files with the gene counts are located
    outdir   : RESULTS + "/DE_DESeq2_MM",     //output filename base pattern - if you change it here, change it also in the module file
    genes    : DE_DESeq2_vars.genes,          //gtf gene annotation file needed to calculate robust FPKM values per gene
    pattern  : "\"\\.readcounts.tsv\"",       //pattern for filtering count files in cwd
    FDR      : DE_DESeq2_vars.FDR,             //FDR filter from DESeq2
    FC       : DE_DESeq2_vars.FC,              //FC filter from DESeq2
    extra    : DE_DESeq2_vars.extra           //extra parms to sent to the tool
]

load PIPELINE_ROOT + "/modules/RNAseq/deseq2_mm.groovy"

// expected parameter types
class DE_DESeq2_MM_vars_schema {
    String targets  
    String contrasts
    String filter   
    String prefix   
    String suffix   
    String dupradar_outdir
    String cwd      
    String outdir   
    String genes    
    String pattern  
    BigDecimal FDR      
    BigDecimal FC       
    String extra    

    // check for the presence of mandatory params
    boolean asBoolean() {
      targets && contrasts && FDR >= 0 && FDR <= 1 && FC > 0
    }
}

validate_schema(DE_DESeq2_MM_vars_schema, DE_DESeq2_MM_vars)
